// utils/mixins.scss
// =================

// Media queries 
// Responsive ratio
// Font styles
// Push auto
// Links Mixins




// Media queries
// -------------

/*
A massive time saver! You can just use pixel values but we have some default breakpoints setup that work too, another time saver while keeping your breakpoints consistent.
*/
// Breakpoints
//$screenLarge: 1440px; // 1440px=90rem
//$screenMediumUp: 1024px; // 1024px=64rem
//$screenMediumDown: 768px; // 768px=48rem
//$screenSmall: 375px; // 375px=23.4375rem

// Breakpoints Mixins
@mixin breakpoint($point) {
    @if $point == screenLarge {
        @media (max-width: $screenLarge) { @content; }
    }
    @else if $point == screenMediumUp {
        @media (max-width: $screenMediumUp) { @content; }
    }
    @else if $point == screenMediumDown {
        @media (max-width: $screenMediumDown) { @content; }
    }
    @else if $point == screenSmall {
        @media (max-width: $screenSmall)  { @content; }
    }
}

//$breakpoints: (
//    "phone":        400px,
//    "phone-wide":   480px,
//    "phablet":      560px,
//    "tablet-small": 640px,
//    "tablet":       768px,
//    "tablet-wide":  1024px,
//    "desktop":      1248px,
//    "desktop-wide": 1440px
//);

@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}
/*
The example below showing the padding and font-size increasing once the viewport gets over 1024px.

.site-header {
    padding: 2rem;
    font-size: 1.8rem;
    @include mq('tablet-wide') {
        padding-top: 4rem;
        font-size: 2.4rem;
    }
}
*/





// Responsive ratio
// ----------------

/*
We use this for creating scalable elements (usually images / background images) that maintain a ratio.
*/
@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}
/*
So to use this you could write the below and your div would have a ratio commonly utilised by video.
div {
    @include responsive-ratio(16,9);
}
*/





// Font styles
// -----------

/*
Take the pain out of setting styles for a font. (This assumes you have already included the font), set your fallback font once and you never have to worry again.
*/
@mixin font-source-sans($size: false, $colour: false, $weight: false,  $lh: false) {
    font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;
    @if $size { font-size: $size; }
    @if $colour { color: $colour; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}





// Push auto
// ---------

/*
To quickly centre a block element without having to worry about if there is any top or bottom margin already applied.
*/
@mixin push-auto {
    margin: { 
        left: auto;
        right: auto;
    }
}





// Links Mixins
// ------------

/*
*		Usage:
*   a {
*      @include links(orange, blue, yellow, teal);
*   }
*/
@mixin links ($link, $visited, $hover, $active) {
    & {
        color: $link;
        &:visited {
            color: $visited;
        }
        &:hover {
            color: $hover;
        }
        &:active, &:focus {
            color: $active;
        }
    }
}





// Micro Clearfix Mixins
// ---------------------

/// Helper to clear inner floats
/// @author Nicolas Gallagher
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix

@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

